#!/bin/bash
#
#
# OpenStack Neutron LBaaS Service
#
# Description:  Manages an OpenStack Neutron LBaaS Service process as an HA resource
#
# Authors: Hunt Xu
# Mainly inspired by the Nova Network resource agent written by Emilien Macchi & Sebastien Han
#
# Support:      http://github.com/eayunstack
# License:      Apache Software License (ASL) 2.0
#
#
# See usage() function below for more details ...
#
# OCF instance parameters:
#   OCF_RESKEY_binary
#   OCF_RESKEY_dist_config
#   OCF_RESKEY_config
#   OCF_RESKEY_plugin_config
#   OCF_RESKEY_user
#   OCF_RESKEY_pid
#   OCF_RESKEY_additional_parameters
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified

PATH=/usr/sbin:/usr/bin

OCF_RESKEY_binary_default="neutron-lbaas-agent"
OCF_RESKEY_dist_config_default="/usr/share/neutron/neutron-dist.conf"
OCF_RESKEY_config_default="/etc/neutron/neutron.conf"
OCF_RESKEY_keystone_config_default="/etc/keystone/keystone.conf"
OCF_RESKEY_plugin_config_default="/etc/neutron/lbaas_agent.ini"
OCF_RESKEY_user_default="neutron"
OCF_RESKEY_pid_default="${HA_RSCTMP}/${__SCRIPT_NAME}/${__SCRIPT_NAME}.pid"
OCF_RESKEY_os_auth_url_default="http://localhost:5000/v2.0"
OCF_RESKEY_log_file_default="/var/log/neutron/lbaas-agent.log"
OCF_RESKEY_debug_default='false'
OCF_RESKEY_auto_reschedule_pools_default=false

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_dist_config=${OCF_RESKEY_dist_config_default}}
: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_keystone_config=${OCF_RESKEY_keystone_config_default}}
: ${OCF_RESKEY_plugin_config=${OCF_RESKEY_plugin_config_default}}
: ${OCF_RESKEY_user=${OCF_RESKEY_user_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
: ${OCF_RESKEY_log_file=${OCF_RESKEY_log_file_default}}
: ${OCF_RESKEY_debug=${OCF_RESKEY_debug_default}}
: ${OCF_RESKEY_os_auth_url=${OCF_RESKEY_os_auth_url_default}}
: ${OCF_RESKEY_auto_reschedule_pools=${OCF_RESKEY_auto_reschedule_pools_default}}

#######################################################################

usage() {
    cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|status|monitor)

        $0 manages an OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) process as an HA resource

        The 'start' operation starts the service.
        The 'stop' operation stops the service.
        The 'validate-all' operation reports whether the parameters are valid
        The 'meta-data' operation reports this RA's meta-data information
        The 'status' operation reports whether the service is running
        The 'monitor' operation reports whether the service seems to be working

UEND
}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="neutron-lbaas-agent">
<version>1.0</version>

<longdesc lang="en">
Resource agent for the OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary})
May manage a neutron-lbaas-agent instance or a clone set that
creates a distributed neutron-lbaas-agent cluster.
</longdesc>
<shortdesc lang="en">Manages the OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary})</shortdesc>
<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron LBaaS agent binary (${OCF_RESKEY_binary})
</longdesc>
<shortdesc lang="en">OpenStack Neutron LBaaS agent binary (${OCF_RESKEY_binary})</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="dist_config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron Service (neutron-server) distribution configuration file
</longdesc>
<shortdesc lang="en">OpenStack Neutron Server (neutron-server) dist config file</shortdesc>
<content type="string" default="${OCF_RESKEY_dist_config_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron Service (neutron-server) configuration file
</longdesc>
<shortdesc lang="en">OpenStack Neutron Server (neutron-server) config file</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="keystone_config" unique="0" required="0">
<longdesc lang="en">
Location of the Keystone configuration file
</longdesc>
<shortdesc lang="en">OpenStack Keystone config file</shortdesc>
<content type="string" default="${OCF_RESKEY_keystone_config_default}" />
</parameter>

<parameter name="os_auth_url" unique="0" required="0">
<longdesc lang="en">
URL of keystone
</longdesc>
<shortdesc lang="en">Keystone URL</shortdesc>
<content type="string" default="${OCF_RESKEY_os_auth_url_default}" />
</parameter>

<parameter name="plugin_config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) configuration file
</longdesc>
<shortdesc lang="en">OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) config file</shortdesc>
<content type="string" default="${OCF_RESKEY_plugin_config_default}" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
User running OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary})
</longdesc>
<shortdesc lang="en">OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) user</shortdesc>
<content type="string" default="${OCF_RESKEY_user_default}" />
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pid file to use for this OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}" />
</parameter>

<parameter name="additional_parameters" unique="0" required="0">
<longdesc lang="en">
Additional parameters to pass on to the OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary})
</longdesc>
<shortdesc lang="en">Additional parameters for neutron-lbaas-agent</shortdesc>
<content type="string" />
</parameter>

<parameter name="log_file" unique="0" required="0">
<longdesc lang="en">
The log file to use for this OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) log file</shortdesc>
<content type="string" default="${OCF_RESKEY_log_file_default}" />
</parameter>

<parameter name="debug" unique="0" required="0">
<longdesc lang="en">
The debug flag for OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) debug flag</shortdesc>
<content type="string" default="${OCF_RESKEY_debug_default}" />
</parameter>

<parameter name="auto_reschedule_pools" unique="0" required="0">
<longdesc lang="en">
Flag to set whether pools auto rescheduling is enabled when agent stops.
</longdesc>
<shortdesc lang="en">OpenStack Neutron LBaaS Agent Service (${OCF_RESKEY_binary}) pools auto rescheduling flag</shortdesc>
<content type="boolean" default="${OCF_RESKEY_auto_reschedule_pools_default}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="20" />
<action name="stop" timeout="20" />
<action name="status" timeout="20" />
<action name="monitor" timeout="30" interval="20" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}

get_worker_pid() {
    local options
    local pid
    # FIXME: Remove if condition and set 'falo' statically once Fuel
    # discontinue support of Ubuntu 12.04 and CentOs 6.x where -a was not defined.
    if pgrep -V | awk 'match($0, /[0-9]\.[0-9].*/) {if (substr($0, RSTART, RLENGTH) < 3.3) {exit 1}}'; then
      options='falo'
    else
      options='flo'
    fi
    pid=`pgrep -u ${OCF_RESKEY_user} -${options} ${OCF_RESKEY_binary} | awk '/python \/usr\/bin/ {print $1}'`
    echo $pid
}

#######################################################################
# Functions invoked by resource manager actions

neutron_lbaas_agent_validate() {
    local rc

    check_binary $OCF_RESKEY_binary

    # A config file on shared storage that is not available
    # during probes is OK.
    if [ ! -f $OCF_RESKEY_config ]; then
        if ! ocf_is_probe; then
            ocf_log err "Config $OCF_RESKEY_config doesn't exist"
            return $OCF_ERR_INSTALLED
        fi
        ocf_log_warn "Config $OCF_RESKEY_config not available during a probe"
    fi

    getent passwd $OCF_RESKEY_user >/dev/null 2>&1
    rc=$?
    if [ $rc -ne 0 ]; then
        ocf_log err "User $OCF_RESKEY_user doesn't exist"
        return $OCF_ERR_INSTALLED
    fi

    true
}


setup_auth() {
    # setup token-based authentication if it possible
    AUTH_TOKEN=""
    if [[ -f $OCF_RESKEY_keystone_config ]] ; then
        AUTH_TOKEN=$(grep -v '#' $OCF_RESKEY_keystone_config | grep -i 'admin_token\s*=\s*' | awk -F'=' '{print $2}')
    fi

    AUTH_TAIL=""
    if [[ -n "$AUTH_TOKEN" ]] ; then
        AUTH_TAIL="--admin-auth-url=${OCF_RESKEY_os_auth_url} --auth-token=${AUTH_TOKEN}"
    fi

    true
}


neutron_lbaas_agent_status() {
    local pid
    local f_pid
    local rc

    # check and make PID file dir
    local PID_DIR="$( dirname ${OCF_RESKEY_pid} )"
    if [ ! -d "${PID_DIR}" ] ; then
        ocf_log debug "Create pid file dir: ${PID_DIR} and chown to ${OCF_RESKEY_user}"
        mkdir -p "${PID_DIR}"
        chown -R ${OCF_RESKEY_user} "${PID_DIR}"
        chmod 755 "${PID_DIR}"
    fi

    pid=`get_worker_pid`
    if [ "xxx$pid" == "xxx" ] ; then
        ocf_log warn "OpenStack Neutron LBaaS agent '$OCF_RESKEY_binary' not running."
        return $OCF_NOT_RUNNING
    fi
    #ocf_log debug "PID='$pid'"

    # Check PID file and create if need
    if [ ! -f $OCF_RESKEY_pid ] ; then
        ocf_log warn "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) was run, but no PID file found."
        ocf_log warn "Writing PID='$pid' to '$OCF_RESKEY_pid' for '${OCF_RESKEY_binary}' worker..."
        echo $pid > $OCF_RESKEY_pid
        return $OCF_SUCCESS
    fi

    # compare PID from file with PID from `pgrep...`
    f_pid=`cat $OCF_RESKEY_pid | tr '\n' ' ' | awk '{print $1}'`
    if [ "xxx$pid" == "xxx$f_pid" ]; then
        return $OCF_SUCCESS
    fi

    # at this point we have PID file and PID from it
    # defferents with PID from `pgrep...`
    if [ ! -d "/proc/$f_pid" ] || [ "xxx$f_pid" == "xxx" ] ; then
        # process with PID from PID-file not found
        ocf_log warn "Old PID file $OCF_RESKEY_pid found, but no running processes with PID=$f_pid found."
        ocf_log warn "PID-file will be re-created (with PID=$pid)."
        echo $pid > $OCF_RESKEY_pid
        return $OCF_SUCCESS
    fi

    # at this point we have alien PID-file and running prosess with this PID.
    ocf_log warn "Another daemon (with PID=$f_pid) running with PID file '$OCF_RESKEY_pid'. My PID=$pid"
    return $OCF_ERR_GENERIC
}


neutron_lbaas_agent_monitor() {
    neutron_lbaas_agent_status
    rc=$?
    return $rc
}


get_ns_list() {
    # get lbaas namespace
    local rv=`ip netns list | grep -Ee "^qlbaas-.*"`
    echo $rv
}


get_pid_list_for_ns_list() {
    local ns_list="$1"
    local pids=`for netns in $ns_list ; do ip netns exec $netns lsof -n -i -t ; done`

    echo $pids
}


clean_up() {
    # kill processes inside netnamespace
    ns_list=`get_ns_list`

    # kill all proceses from all lbaas net.namespaces, that using ip
    count=3
    while [ $count -gt 0 ] ; do
        inside_ns_pids=`get_pid_list_for_ns_list "$ns_list"`
        if [ -z "$inside_ns_pids" ] ; then
            break
        fi

        for ns_pid in $inside_ns_pids ; do
            ocf_run kill $ns_pid
        done

        sleep 1
        count=$(($count - 1))
    done

    # kill all remaining proceses, that not died by simple kill
    inside_ns_pids=`get_pid_list_for_ns_list "$ns_list"`
    if [ ! -z "$inside_ns_pids" ] ; then
        for ns_pid in $inside_ns_pids ; do
            ocf_run kill -9 $ns_pid
        done
    fi

    # cleanup network interface
    q-agent-cleanup.py --agent=lbaas --cleanup-ports
}


clean_up_namespace() {
    # use clean_up before it
    ns_list=`get_ns_list`
    if [ ! -z "$ns_list" ] ; then
        for ns in $ns_list ; do
            ocf_run ip --force netns delete $ns
        done
    fi
}

neutron_lbaas_agent_start() {
    local rc

    neutron_lbaas_agent_status
    rc=$?
    if [ $rc -eq $OCF_SUCCESS ]; then
        ocf_log info "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) already running"
        return $OCF_SUCCESS
    fi

    clean_up
    sleep 1
    clean_up_namespace

    # run and detach to background neutron-lbaas-agent as daemon.
    # Don't use ocf_run as we're sending the tool's output
    su ${OCF_RESKEY_user} -s /bin/sh -c "${OCF_RESKEY_binary} --config-file $OCF_RESKEY_dist_config \
        --config-file $OCF_RESKEY_config --config-file $OCF_RESKEY_plugin_config \
        --log-file $OCF_RESKEY_log_file $OCF_RESKEY_additional_parameters \
        >> /dev/null 2>&1 & echo \$! > $OCF_RESKEY_pid"
    ocf_log debug "Create pid file: ${OCF_RESKEY_pid} with content $(cat ${OCF_RESKEY_pid})"

    # Spin waiting for the server to come up.
    # Let the CRM/LRM time us out if required
    while true; do
        neutron_lbaas_agent_monitor
        rc=$?
        [ $rc -eq $OCF_SUCCESS ] && break
        if [ $rc -ne $OCF_NOT_RUNNING ]; then
            ocf_log err "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) start failed"
            exit $OCF_ERR_GENERIC
        fi
        sleep 3
    done

    ocf_log info "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) started"
    return $OCF_SUCCESS
}

neutron_lbaas_agent_stop() {
    local rc
    local pid

    neutron_lbaas_agent_status
    rc=$?
    if [ $rc -eq $OCF_NOT_RUNNING ]; then
        ocf_log info "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) already stopped"
        return $OCF_SUCCESS
    fi

    # Try SIGTERM

    pid=`get_worker_pid`
    if [ "xxx$pid" == "xxx" ] ; then
        ocf_log warn "OpenStack Neutron LBaaS agent '$OCF_RESKEY_binary' not running."
        #return $OCF_NOT_RUNNING
        return $OCF_SUCCESS
    fi

    ocf_run kill -s TERM $pid
    rc=$?
    if [ $rc -ne 0 ]; then
        ocf_log err "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) couldn't be stopped"
        exit $OCF_ERR_GENERIC
    fi

    # stop waiting
    shutdown_timeout=15
    if [ -n "$OCF_RESKEY_CRM_meta_timeout" ]; then
        shutdown_timeout=$((($OCF_RESKEY_CRM_meta_timeout/1000)-5))
    fi
    count=0
    while [ $count -lt $shutdown_timeout ]; do
        neutron_lbaas_agent_status
        rc=$?
        if [ $rc -eq $OCF_NOT_RUNNING ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 1
        ocf_log debug "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) still hasn't stopped yet. Waiting ..."
    done

    neutron_lbaas_agent_status
    rc=$?
    if [ $rc -ne $OCF_NOT_RUNNING ]; then
        # SIGTERM didn't help either, try SIGKILL
        ocf_log info "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) failed to stop after ${shutdown_timeout}s \
          using SIGTERM. Trying SIGKILL ..."
        ocf_run kill -s KILL $pid
    fi

    clean_up
    sleep 1
    clean_up_namespace
    if ocf_is_true "$OCF_RESKEY_auto_reschedule_pools" ; then
        # reschedule to alive lbaas agent
        q-agent-cleanup.py --agent=lbaas --reschedule --remove-self ${AUTH_TAIL} 2>&1 >> /var/log/neutron/rescheduling.log &
    fi

    ocf_log info "OpenStack Neutron LBaaS agent (${OCF_RESKEY_binary}) stopped"

    ocf_log debug "Delete pid file: ${OCF_RESKEY_pid} with content $(cat ${OCF_RESKEY_pid})"
    rm -f $OCF_RESKEY_pid

    return $OCF_SUCCESS
}

#######################################################################

case "$1" in
  meta-data)    meta_data
                exit $OCF_SUCCESS;;
  usage|help)   usage
                exit $OCF_SUCCESS;;
esac

# Anything except meta-data and help must pass validation
neutron_lbaas_agent_validate || exit $?
setup_auth || exit $?
umask 0022

# What kind of method was invoked?
case "$1" in
  start)        neutron_lbaas_agent_start;;
  stop)         neutron_lbaas_agent_stop;;
  status)       neutron_lbaas_agent_status;;
  monitor)      neutron_lbaas_agent_monitor;;
  validate-all) ;;
  *)            usage
                exit $OCF_ERR_UNIMPLEMENTED;;
esac
